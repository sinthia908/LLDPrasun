
// IPO problem Leetcode
//https://leetcode.com/problems/ipo/description/


package com.practice.heap;



import java.util.Comparator;
import java.util.Iterator;
import java.util.PriorityQueue;

import java.util.*;

/*
Input: k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]
Output: 4*/

public class Test1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
	    int maxProfit = 0;
		
		List<Pair> list = new ArrayList<Pair>();
	    
	    
		int[] profits = {1,2,3};
		
		int[] capital = {0,1,1};
		
		
		int n = profits.length;
		
		
		list.add(new Pair(1,0));
	    
	    list.add(new Pair(1,2));
	    list.add(new Pair(3,1));
	    
	    
	    Collections.sort(list,new PairComparator());
	    
	    
	    PriorityQueue<Integer> pq = new PriorityQueue<Integer>((a,b) -> a-b);
	    
	    int k=2;
	    int i,j=0;
	    
	    for(i=0 ; i<k ; i++) {
	    	while (j<n && list.get(i).capital <= maxProfit) {
	    		pq.add(list.get(i).profit);
	    		j++;
	    	}
	    	
	    	if (pq.size() == 0) break;
	    	
	    	maxProfit += pq.peek();
	    	pq.poll();
	    	
	    }
	    
	    
	    System.out.print(maxProfit);
	   
	    
       
		    
		
		/*
		 * 
		 * 
		 * // Creating an iterator Iterator value = pq.iterator();
		 * 
		 * // Displaying the values after iterating through the queue
		 * System.out.println("The iterator values are: " + pq.size()); while
		 * (value.hasNext()) { Pair p = (Pair) value.next(); System.out.print(p.capital
		 * + " "); }
		 * 
		 */
        

	}

}




class PairComparator implements Comparator<Pair>{

	public int compare(Pair p1,Pair p2) {
		// TODO Auto-generated method stub
		
		if ( p2.capital > p1.capital)
		   return -1;
		else if ( p1.capital > p2.capital)
		   return 1;
	    return 0;
	}
	
	
	
	
}



class Pair{
	public int profit;
	public int capital;
	
	Pair(int profit,int capital){
		this.profit = profit;
		this.capital = capital;
	}
}
