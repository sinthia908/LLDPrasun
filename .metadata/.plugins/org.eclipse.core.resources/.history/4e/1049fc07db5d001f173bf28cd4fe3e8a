package com.practice.test;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;


public class SplitwiseService {
	
	private static SplitwiseService instance;
	private static Map<Integer,User> users;
	private static Map<Integer,Group> groups;
	
	
	SplitwiseService(){
		users = new ConcurrentHashMap<>();	
		groups = new ConcurrentHashMap<>();	
	}
	
	
	// Singleton Pattern
	public static SplitwiseService getInstance() {
		if (instance == null)
			instance = new SplitwiseService();
		return instance;
	}
	
	
    // Add expense 
	
	public void addExpense(String groupId , Expense expense) {
		Group group = groups.get(groupId);
		if (group != null) {
		    group.addExpense(expense);
		    splitExpense(expense);
		    updateBalance(expense);    
		}
		
	}

	//
	
	public void splitExpense(Expense expense) {
		double totalAmount = expense.getAmount();
		List<Split> splits = expense.getSplits();
		int totalSplits = splits.size();
		
		double splitAmount = totalAmount / totalSplits;
		
		
		
		
		
	}

	

}
